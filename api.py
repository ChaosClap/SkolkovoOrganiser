import os
from fastapi import FastAPI, Request, Form, Depends, HTTPException, Header, status, UploadFile, File, Response, Query, APIRouter
from fastapi.responses import HTMLResponse, PlainTextResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from pydantic import BaseModel
from fastapi.security import OAuth2PasswordRequestForm
from auth_utils import verify_password, create_access_token
import io
from schemas import AdminRequestOut


from database import SessionLocal, engine
from models import User, StartupProfile, MentorProfile, AdminRequest, AdminProfile
from database import Base
from datetime import datetime
from typing import Dict, List, Union


from auth_utils import hash_password, decode_token #auth_utils.py

from fastapi import Header, Depends
from jose import JWTError

from fastapi.responses import JSONResponse, FileResponse
from models import FormEntry, AdminRequest
from schemas import StartupRegister, MentorRegister, MentorOut, StartupOut, AdminRequestCreate, AdminRegister






CURRENT_VERSION = "1.0"
EXE_PATH = "SkolkovoOrganiser.exe"

app = FastAPI()
templates = Jinja2Templates(directory="templates")


# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–æ–¥–∏–Ω —Ä–∞–∑)
Base.metadata.create_all(bind=engine)

router = APIRouter(prefix="/api")

class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"
    role: str

class UserLogin(BaseModel):
    username: str
    password: str

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –∞–Ω–∫–µ—Ç—ã
fields = [
    {"label": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", "name": "company", "type": "text"},
    {"label": "–û—Ç—Ä–∞—Å–ª—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "name": "industry", "type": "text"},
    {"label": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/—É—Å–ª—É–≥–∏", "name": "description", "type": "textarea"},
    {"label": "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç / –∫–∞—Ç–∞–ª–æ–≥", "name": "website", "type": "text"},
    {"label": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –ª–µ–∂–∞—â–∞—è –≤ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–∞", "name": "technology", "type": "textarea"},
    {"label": "–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤", "name": "sales", "type": "text"},
    {"label": "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", "name": "presentation", "type": "text"},
    {"label": "–ö–ª—é—á–µ–≤—ã–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞", "name": "goals", "type": "textarea"},
    {"label": "–ü–æ–∏—Å–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞ (–æ–±—ä–µ–º)", "name": "investment", "type": "text"},
]



@app.get("/latest-version", response_class=PlainTextResponse)
def get_latest_version():
    with open("version.txt", "r") as f:
        return f.read().strip()

@app.get("/SkolkovoOrganiser.zip")
def get_zip():
    zip_path = os.path.abspath(os.path.join("dist", "SkolkovoOrganiser.zip"))
    if not os.path.exists(zip_path):
        raise HTTPException(status_code=404, detail="ZIP-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return FileResponse(zip_path, media_type="application/zip")

# –ù–£–ñ–ï–ù –î–û–ú–ï–ù –ò–õ–ò –ß–¢–û-–¢–û, –û–¢–ö–£–î–ê –ë–£–î–ï–ú –ö–ê–ß–ê–¢–¨ SETUP –§–ê–ô–õ


@app.get("/", response_class=HTMLResponse)
async def get_form(request: Request):
    return templates.TemplateResponse("form.html", {
        "request": request,
        "fields": fields,
        "success": False,
        "form_values": {}
    })


@app.post("/submit", response_class=HTMLResponse)
async def submit_form(
    request: Request,
    company: str = Form(...),
    industry: str = Form(...),
    description: str = Form(...),
    website: str = Form(...),
    technology: str = Form(...),
    sales: str = Form(...),
    presentation: str = Form(...),
    goals: str = Form(...),
    investment: str = Form(...),
):
    form_data = {
        "company": company,
        "industry": industry,
        "description": description,
        "website": website,
        "technology": technology,
        "sales": sales,
        "presentation": presentation,
        "goals": goals,
        "investment": investment,
    }

    try:
        db: Session = SessionLocal()
        entry = FormEntry(**form_data)
        db.add(entry)
        db.commit()
        db.close()
        success = True
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", e)
        success = False

    form_values = {} if success else form_data

    return templates.TemplateResponse("form.html", {
        "request": request,
        "fields": fields,
        "success": success,
        "form_values": form_values
    })

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

class UserCreate(BaseModel):
    username: str
    password: str
    role: str = "mentor"
    full_name: str = ""
    position: str = ""
    experience: str = ""
    skills: str = ""
    achievements: str = ""

@app.post("/auth/register")
def register_user(user_data: UserCreate, db: Session = Depends(get_db)):
    existing_user = db.query(User).filter(User.username == user_data.username).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    user = User(
        username=user_data.username,
        hashed_password=hash_password(user_data.password),
        role=user_data.role,
        full_name=user_data.full_name,
        position=user_data.position,
        experience=user_data.experience,
        skills=user_data.skills,
        achievements=user_data.achievements
    )

    db.add(user)
    db.commit()
    db.refresh(user)

    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "user_id": user.id}


@app.post("/auth/register_startup")
def register_startup(data: StartupRegister, db: Session = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞
    if db.query(User).filter(User.username == data.username).first():
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞—Ä—Ç–∞–ø–∞
    startup = StartupProfile(
        company_name=data.company_name,
        company_ogrn=data.company_ogrn,
        representative_name=data.representative_name,
        email=data.email,
        phone=data.phone,
        industry=data.industry,
        description=data.description,
        website=data.website,
        technology=data.technology,
        sales=data.sales,
        presentation=data.presentation,
        goals=data.goals,
        investment=data.investment,
        current_stage=data.current_stage,
        six_month_plan=data.six_month_plan
    )
    db.add(startup)
    db.commit()
    db.refresh(startup)

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    user = User(
        username=data.username,
        hashed_password=hash_password(data.password),
        role="startup",
        startup_id=startup.id
    )
    db.add(user)
    db.commit()

    return {"message": "–°—Ç–∞—Ä—Ç–∞–ø —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "startup_id": startup.id, "user_id": user.id}

@app.post("/auth/register_mentor")
def register_mentor(data: MentorRegister, db: Session = Depends(get_db)):
    if db.query(User).filter(User.username == data.username).first():
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    mentor = MentorProfile(
        full_name=data.full_name,
        position=data.position,
        experience=data.experience,
        skills=data.skills,
        achievements=data.achievements
    )
    db.add(mentor)
    db.commit()
    db.refresh(mentor)

    user = User(
        username=data.username,
        hashed_password=hash_password(data.password),
        role="mentor",
        mentor_id=mentor.id
    )
    db.add(user)
    db.commit()

    return {"message": "–ú–µ–Ω—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "mentor_id": mentor.id, "user_id": user.id}

@app.post("/auth/login", response_model=Token)
def login_user(form_data: UserLogin, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == form_data.username).first()
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    token = create_access_token({"sub": str(user.id), "role": user.role})
    return {
        "access_token": token,
        "role": user.role
    }




def get_current_user(token: str = Header(..., alias="Authorization"), db: Session = Depends(get_db)):
    print("üî• RAW HEADER:", token)
    if token.startswith("Bearer "):
        token = token[7:]

    payload = decode_token(token)
    if payload is None:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")

    user = db.query(User).filter(User.id == int(payload.get("sub"))).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return user

@app.get("/auth/me")
def get_profile(current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    if current_user.role == "mentor":
        mentor = db.query(MentorProfile).filter(MentorProfile.id == current_user.mentor_id).first()
        if not mentor:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {
            "full_name": mentor.full_name,
            "position": mentor.position,
            "experience": mentor.experience,
            "skills": mentor.skills,
            "achievements": mentor.achievements
        }

    elif current_user.role == "startup":
        startup = db.query(StartupProfile).filter(StartupProfile.id == current_user.startup_id).first()
        if not startup:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞—Ä—Ç–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {
            "company_name": startup.company_name,
            "company_ogrn": startup.company_ogrn,
            "representative_name": startup.representative_name,
            "email": startup.email,
            "phone": startup.phone,
            "industry": startup.industry,
            "description": startup.description,
            "website": startup.website,
            "technology": startup.technology,
            "sales": startup.sales,
            "presentation": startup.presentation,
            "goals": startup.goals,
            "investment": startup.investment,
            "current_stage": startup.current_stage,
            "six_month_plan": startup.six_month_plan
        }


    elif current_user.role == "admin":
        admin = db.query(AdminProfile).filter(AdminProfile.id == current_user.admin_id).first()
        if not admin:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {
            "full_name": admin.full_name,
            "position": admin.position,
            "is_active": admin.is_active
        }


    else:
        raise HTTPException(status_code=400, detail="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")



@app.post("/auth/avatar")
def upload_avatar(
    file: UploadFile = File(...),
    user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    if file.content_type not in ["image/png", "image/jpeg"]:
        raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    avatar_bytes = file.file.read()

    if user.role == "mentor" and user.mentor:
        user.mentor.avatar = avatar_bytes
    elif user.role == "startup" and user.startup:
        user.startup.avatar = avatar_bytes
    else:
        raise HTTPException(status_code=400, detail="–ê–≤–∞—Ç–∞—Ä –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞ –∏–ª–∏ –º–µ–Ω—Ç–æ—Ä–∞")

    db.commit()
    return {"message": "–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω"}



@app.get("/auth/avatar")
def get_avatar(user: User = Depends(get_current_user)):
    avatar = None
    if user.role == "mentor" and user.mentor:
        avatar = user.mentor.avatar
    elif user.role == "startup" and user.startup:
        avatar = user.startup.avatar

    if not avatar:
        raise HTTPException(status_code=404, detail="–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return Response(content=avatar, media_type="image/png")



@router.get("/mentors", response_class=JSONResponse)
def get_mentors(
    skip: int = Query(0, ge=0),
    limit: int = Query(20, le=100),
    search: str = Query(None),
    db: Session = Depends(get_db)
):
    query = db.query(MentorProfile)
    if search:
        query = query.filter(MentorProfile.full_name.ilike(f"%{search}%"))

    total = query.count()
    mentors = query.offset(skip).limit(limit).all()

    result = [
        {
            "id": m.id,
            "full_name": m.full_name
        }
        for m in mentors
    ]
    return {"total": total, "items": result}



@router.get("/mentors/{mentor_id}", response_model=MentorOut)
def get_mentor_by_id(mentor_id: int, db: Session = Depends(get_db)):
    mentor = db.query(MentorProfile).filter(MentorProfile.id == mentor_id).first()
    if not mentor:
        raise HTTPException(status_code=404, detail="–ú–µ–Ω—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return mentor

@router.get("/mentors/{mentor_id}/avatar")
def get_mentor_avatar(mentor_id: int, db: Session = Depends(get_db)):
    mentor = db.query(MentorProfile).filter(MentorProfile.id == mentor_id).first()
    if not mentor or not mentor.avatar:
        raise HTTPException(status_code=404, detail="–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return Response(content=mentor.avatar, media_type="image/png")



# –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤

@router.get("/startups")
def get_startups(
    skip: int = Query(0, ge=0),
    limit: int = Query(20, le=100),
    db: Session = Depends(get_db)
):
    query = db.query(StartupProfile)
    total = query.count()
    startups = query.offset(skip).limit(limit).all()

    items = [
        {
            "id": s.id,
            "company_name": s.company_name
        }
        for s in startups
    ]

    return {
        "total": total,
        "items": items
    }


@router.get("/startups/{startup_id}")
def get_startup_by_id(startup_id: int, db: Session = Depends(get_db)):
    startup = db.query(StartupProfile).filter(StartupProfile.id == startup_id).first()
    if not startup:
        raise HTTPException(status_code=404, detail="–°—Ç–∞—Ä—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {
        "id": startup.id,
        "company_name": startup.company_name,
        "company_ogrn": startup.company_ogrn,
        "representative_name": startup.representative_name,
        "email": startup.email,
        "phone": startup.phone,
        "industry": startup.industry,
        "description": startup.description,
        "website": startup.website,
        "technology": startup.technology,
        "sales": startup.sales,
        "presentation": startup.presentation,
        "goals": startup.goals,
        "investment": startup.investment,
        "current_stage": startup.current_stage,
        "six_month_plan": startup.six_month_plan,
    }


@router.get("/startups/{startup_id}/avatar")
def get_startup_avatar(startup_id: int, db: Session = Depends(get_db)):
    startup = db.query(StartupProfile).filter(StartupProfile.id == startup_id).first()
    if not startup or not startup.avatar:
        raise HTTPException(status_code=404, detail="–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return Response(content=startup.avatar, media_type="image/png")



@app.post("/admin/request")
def request_admin_access(data: AdminRequestCreate, db: Session = Depends(get_db)):
    # —É–∂–µ –∞–¥–º–∏–Ω?
    user = db.query(User).filter(User.id == data.user_id).first()
    if not user:
        raise HTTPException(404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    if user.role == "admin" and user.admin and user.admin.is_active == 1:
        raise HTTPException(400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω")

    # –∑–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?
    existing = db.query(AdminRequest).filter_by(user_id=data.user_id).first()
    if existing:
        raise HTTPException(400, detail="–ó–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–¥–∞–Ω–∞")

    req = AdminRequest(user_id=data.user_id, created_at=datetime.utcnow())
    db.add(req)
    db.commit()
    db.refresh(req)
    return {"message": "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞", "request_id": req.id}

def get_current_active_admin(user: User = Depends(get_current_user)) -> User:
    if user.role != "admin" or not user.admin or not user.admin.is_active:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤")
    return user



@app.get("/admin/requests", response_model=Dict[str, Union[int, List[AdminRequestOut]]])
def get_admin_requests(
    current_user: User = Depends(get_current_active_admin),
    db: Session = Depends(get_db),
    skip: int = Query(0, ge=0),
    limit: int = Query(20, le=100)
):
    if current_user.role != "admin":
        raise HTTPException(403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    query = (
        db.query(AdminRequest)
        .join(User)
        .join(AdminProfile, AdminProfile.id == User.admin_id)
        .filter(AdminProfile.is_active == 0)  # <--- –í–ê–ñ–ù–û
        .order_by(AdminRequest.created_at.desc())
    )

    total = query.count()
    requests = query.offset(skip).limit(limit).all()

    items = []
    for req in requests:
        user = req.user
        role = user.role

        if role == "mentor" and user.mentor:
            full_name = user.mentor.full_name
            position = user.mentor.position
        elif role == "admin" and user.admin:
            full_name = user.admin.full_name
            position = user.admin.position
        else:
            full_name = "‚Äî"
            position = "‚Äî"

        items.append({
            "request_id": req.id,
            "user_id": user.id,
            "username": user.username,
            "created_at": req.created_at,
            "role": role,
            "full_name": full_name,
            "position": position,
        })

    return {
        "total": total,
        "items": items
    }



@app.post("/admin/approve/{user_id}")
def approve_admin_request(
    user_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–¥–æ–±—Ä—è—Ç—å
    if current_user.role != "admin":
        raise HTTPException(403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞
    request = db.query(AdminRequest).filter_by(user_id=user_id).first()
    if not request:
        raise HTTPException(404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞
    admin_profile = AdminProfile(
        full_name=user.username,  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        position="",
        is_active=1
    )
    db.add(admin_profile)
    db.commit()
    db.refresh(admin_profile)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.role = "admin"
    user.admin_id = admin_profile.id
    db.delete(request)
    db.commit()

    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º"}


@app.post("/admin/reject/{user_id}")
def reject_admin_request(
    user_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    if current_user.role != "admin":
        raise HTTPException(403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    request = db.query(AdminRequest).filter_by(user_id=user_id).first()
    if not request:
        raise HTTPException(404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    db.delete(request)
    db.commit()
    return {"message": "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"}


@app.post("/auth/register_staff")
def register_staff(data: AdminRegister, db: Session = Depends(get_db)):
    if db.query(User).filter(User.username == data.username).first():
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞
    admin_profile = AdminProfile(
        full_name=data.full_name,
        position=data.position,
        is_active=0
    )
    db.add(admin_profile)
    db.flush()  # –ø–æ–ª—É—á–∞–µ–º ID –¥–æ –∫–æ–º–º–∏—Ç–∞

    # —Å–æ–∑–¥–∞—ë–º —é–∑–µ—Ä–∞ —Å —Ä–æ–ª—å—é "admin" –∏ –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø—Ä–æ—Ñ–∏–ª—é
    user = User(
        username=data.username,
        hashed_password=hash_password(data.password),
        role="admin",
        admin_id=admin_profile.id
    )
    db.add(user)
    db.flush()

    # —Å–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —é–∑–µ—Ä–æ–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å)
    admin_profile.user = user

    # —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
    if db.query(AdminRequest).filter_by(user_id=user.id).first():
        raise HTTPException(status_code=400, detail="–ó–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    request = AdminRequest(user_id=user.id, created_at=datetime.utcnow())
    db.add(request)
    db.commit()

    return {"message": "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"}


    @router.post("/admin/approve/{request_id}")
    def approve_admin_request(
            request_id: int,
            data: AdminRegister,
            db: Session = Depends(get_db),
            current_admin: User = Depends(get_current_active_admin)  # <--- –∑–∞–º–µ–Ω–∏–ª–∏
    ):
        admin_request = db.query(AdminRequest).filter_by(id=request_id).first()
        if not admin_request:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        user = db.query(User).filter_by(id=admin_request.user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if user.admin_id is not None:
            raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

        profile = user.admin
        if not profile:
            raise HTTPException(status_code=400, detail="–ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
        profile.full_name = data.full_name
        profile.position = data.position
        profile.is_active = 1




        db.add(user)
        db.delete(admin_request)
        db.commit()

        return {"message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"}





# –í–°–ï–ì–î–ê –í –ö–û–ù–¶–ï!
app.include_router(router)



